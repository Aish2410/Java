{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nimport * as i2 from \"./alert.service\";\nimport * as i3 from \"@angular/router\";\nexport class AuthService {\n  constructor(api, alert, router) {\n    this.api = api;\n    this.alert = alert;\n    this.router = router;\n  }\n  register(data) {\n    data.active = true;\n    data.id = 0;\n    this.api.post('/user/register', data).subscribe(res => {\n      this.alert.success('Registration successful.');\n    }, this.alert.apiFail);\n  }\n  login(data) {\n    this.api.post('/user/login', data).subscribe(res => {\n      console.log('res', res);\n      sessionStorage.setItem('SESSION_TOKEN', res.response);\n      sessionStorage.setItem('SESSION_ROLE', data.role);\n      sessionStorage.setItem('SESSION_EMAIL', data.username);\n      if (data.role === 'ACM') this.router.navigateByUrl(\"/admin\");else if (data.role === 'APPLICANT') this.router.navigateByUrl(\"/student\");else if (data.role === 'STAFF') this.router.navigateByUrl(\"/staff\");\n    }, this.alert.apiFail);\n  }\n  forgotPassword(data) {\n    this.api.post('/user/forgot/password', data).subscribe(this.alert.apiSuccess, this.alert.apiFail);\n  }\n  isLoggedIn() {\n    if (sessionStorage.getItem('SESSION_TOKEN') && sessionStorage.getItem('SESSION_ROLE') && sessionStorage.getItem('SESSION_EMAIL')) return true;\n    return false;\n  }\n  isAdmin() {\n    if (sessionStorage.getItem('SESSION_ROLE') && sessionStorage.getItem('SESSION_ROLE') === 'ACM') return true;\n    return false;\n  }\n  isStaff() {\n    if (sessionStorage.getItem('SESSION_ROLE') && sessionStorage.getItem('SESSION_ROLE') === 'STAFF') return true;\n    return false;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.AlertService), i0.ɵɵinject(i3.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;AASA,OAAM,MAAOA,WAAW;EAEtBC,YAAoBC,GAAe,EAAUC,KAAmB,EAAUC,MAAc;IAApE,QAAG,GAAHF,GAAG;IAAsB,UAAK,GAALC,KAAK;IAAwB,WAAM,GAANC,MAAM;EAAY;EAE5FC,QAAQ,CAACC,IAAa;IACpBA,IAAI,CAACC,MAAM,GAAG,IAAI;IAClBD,IAAI,CAACE,EAAE,GAAG,CAAC;IACX,IAAI,CAACN,GAAG,CAACO,IAAI,CAAC,gBAAgB,EAAEH,IAAI,CAAC,CAACI,SAAS,CAAEC,GAAQ,IAAI;MAC3D,IAAI,CAACR,KAAK,CAACS,OAAO,CAAC,0BAA0B,CAAC;IAChD,CAAC,EAAE,IAAI,CAACT,KAAK,CAACU,OAAO,CAAC;EACxB;EAEAC,KAAK,CAACR,IAAc;IAClB,IAAI,CAACJ,GAAG,CAACO,IAAI,CAAC,aAAa,EAAEH,IAAI,CAAC,CAACI,SAAS,CAAEC,GAAQ,IAAI;MACxDI,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEL,GAAG,CAAC;MACvBM,cAAc,CAACC,OAAO,CAAC,eAAe,EAAEP,GAAG,CAACQ,QAAQ,CAAC;MACrDF,cAAc,CAACC,OAAO,CAAC,cAAc,EAAEZ,IAAI,CAACc,IAAI,CAAC;MACjDH,cAAc,CAACC,OAAO,CAAC,eAAe,EAAEZ,IAAI,CAACe,QAAQ,CAAC;MACtD,IAAIf,IAAI,CAACc,IAAI,KAAK,KAAK,EACrB,IAAI,CAAChB,MAAM,CAACkB,aAAa,CAAC,QAAQ,CAAC,MAChC,IAAIhB,IAAI,CAACc,IAAI,KAAK,WAAW,EAChC,IAAI,CAAChB,MAAM,CAACkB,aAAa,CAAC,UAAU,CAAC,MAClC,IAAIhB,IAAI,CAACc,IAAI,KAAK,OAAO,EAC5B,IAAI,CAAChB,MAAM,CAACkB,aAAa,CAAC,QAAQ,CAAC;IAEvC,CAAC,EAAE,IAAI,CAACnB,KAAK,CAACU,OAAO,CAAC;EACxB;EAEAU,cAAc,CAACjB,IAAuB;IACpC,IAAI,CAACJ,GAAG,CAACO,IAAI,CAAC,uBAAuB,EAAEH,IAAI,CAAC,CAACI,SAAS,CAAC,IAAI,CAACP,KAAK,CAACqB,UAAU,EAAE,IAAI,CAACrB,KAAK,CAACU,OAAO,CAAC;EACnG;EAEAY,UAAU;IACR,IAAIR,cAAc,CAACS,OAAO,CAAC,eAAe,CAAC,IAAIT,cAAc,CAACS,OAAO,CAAC,cAAc,CAAC,IAAIT,cAAc,CAACS,OAAO,CAAC,eAAe,CAAC,EAC9H,OAAO,IAAI;IACb,OAAO,KAAK;EACd;EAEAC,OAAO;IACL,IAAIV,cAAc,CAACS,OAAO,CAAC,cAAc,CAAC,IAAIT,cAAc,CAACS,OAAO,CAAC,cAAc,CAAC,KAAK,KAAK,EAC5F,OAAO,IAAI;IACb,OAAO,KAAK;EACd;EAEAE,OAAO;IACL,IAAIX,cAAc,CAACS,OAAO,CAAC,cAAc,CAAC,IAAIT,cAAc,CAACS,OAAO,CAAC,cAAc,CAAC,KAAK,OAAO,EAC9F,OAAO,IAAI;IACb,OAAO,KAAK;EACd;;AAhDW1B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA6B,SAAX7B,WAAW;EAAA8B,YAFV;AAAM","names":["AuthService","constructor","api","alert","router","register","data","active","id","post","subscribe","res","success","apiFail","login","console","log","sessionStorage","setItem","response","role","username","navigateByUrl","forgotPassword","apiSuccess","isLoggedIn","getItem","isAdmin","isStaff","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Dell\\university_project\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ForgotPasswordDTO, LoginDTO, UserDTO } from '../interfaces';\nimport { AlertService } from './alert.service';\nimport { ApiService } from './api.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private api: ApiService, private alert: AlertService, private router: Router) { }\n\n  register(data: UserDTO) {\n    data.active = true;\n    data.id = 0;\n    this.api.post('/user/register', data).subscribe((res: any) => {\n      this.alert.success('Registration successful.')\n    }, this.alert.apiFail);\n  }\n\n  login(data: LoginDTO) {\n    this.api.post('/user/login', data).subscribe((res: any) => {\n      console.log('res', res);\n      sessionStorage.setItem('SESSION_TOKEN', res.response);\n      sessionStorage.setItem('SESSION_ROLE', data.role);\n      sessionStorage.setItem('SESSION_EMAIL', data.username);\n      if (data.role === 'ACM')\n        this.router.navigateByUrl(\"/admin\")\n      else if (data.role === 'APPLICANT')\n        this.router.navigateByUrl(\"/student\")\n      else if (data.role === 'STAFF')\n        this.router.navigateByUrl(\"/staff\")\n\n    }, this.alert.apiFail);\n  }\n\n  forgotPassword(data: ForgotPasswordDTO) {\n    this.api.post('/user/forgot/password', data).subscribe(this.alert.apiSuccess, this.alert.apiFail);\n  }\n\n  isLoggedIn() {\n    if (sessionStorage.getItem('SESSION_TOKEN') && sessionStorage.getItem('SESSION_ROLE') && sessionStorage.getItem('SESSION_EMAIL'))\n      return true;\n    return false;\n  }\n\n  isAdmin() {\n    if (sessionStorage.getItem('SESSION_ROLE') && sessionStorage.getItem('SESSION_ROLE') === 'ACM')\n      return true;\n    return false;\n  }\n\n  isStaff() {\n    if (sessionStorage.getItem('SESSION_ROLE') && sessionStorage.getItem('SESSION_ROLE') === 'STAFF')\n      return true;\n    return false;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}